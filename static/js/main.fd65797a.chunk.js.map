{"version":3,"sources":["components/toDoItem/index.js","components/completedContainer/index.js","components/toDoSettings/index.js","components/toDoContainer/index.js","App.js","serviceWorker.js","index.js"],"names":["Item","console","log","this","props","className","item","done","title","content","index","time","onClick","completeItem","removeItem","React","Component","Complete","completedCount","Settings","name","onChange","e","filterData","target","value","Container","state","data","newItem","filter","count","forEach","setState","date","Date","dateString","getMonth","getDay","getFullYear","getHours","getMinutes","copy","prevState","updateApp","alert","splice","newArray","tasks","localStorage","setItem","JSON","stringify","key","clearComplete","removeComplete","bind","map","i","type","placeholder","updateInput","addItem","listArray","getItem","parse","App","id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fd65797a.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./toDoItem.css\";\n\n//component for the todo item\n\nexport default class Item extends React.Component {\n  render() {\n    console.log(this.props);\n    return (\n      <li\n        className={`line-item box-shadow ${\n          this.props.item.done ? \"completed-item\" : \"\"\n        }`}\n      >\n        <h3 title={this.props.item.content}>\n          {this.props.index + 1}. {this.props.item.content}\n        </h3>\n        <h6 className=\"timestamp\">{this.props.item.time}</h6>\n        <span\n          className=\"subtext teal\"\n          title=\"Complete Task\"\n          onClick={() => this.props.completeItem(this.props.index)}\n        >\n          complete\n        </span>\n        <span\n          className=\"subtext red\"\n          title=\"Remove Task\"\n          onClick={() => this.props.removeItem(this.props.index)}\n        >\n          remove\n        </span>\n      </li>\n    );\n  }\n}\n","import React from \"react\";\n\n//component for displaying completed items\n\nexport default class Complete extends React.Component {\n  render() {\n    return (\n      <div className=\"side-container completed-container\">\n        <h1>{this.props.completedCount}</h1>\n        <h3>\n          Task\n          {this.props.completedCount > 1 || this.props.completedCount === 0\n            ? \"s\"\n            : \"\"}{\" \"}\n          Left\n        </h3>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\n//component for filtering todo\n\nexport default class Settings extends React.Component {\n  render() {\n    return (\n      <div className=\"side-container settings-container\">\n        <span>Filter Tasks </span>\n        <select\n          className=\"select-filter\"\n          name=\"filter\"\n          onChange={e => {\n            this.props.filterData(e.target.value);\n          }}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"done\">Done</option>\n          <option value=\"notDone\">Not Done</option>\n        </select>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport ToDoItem from \"../toDoItem/index.js\";\nimport CompletedContainer from \"../completedContainer/index.js\";\nimport ToDoSettings from \"../toDoSettings/index.js\";\n\nimport \"./container.css\";\nimport { thisTypeAnnotation } from \"@babel/types\";\n\nexport default class Container extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: this.props.data,\n      newItem: \"\",\n      completedCount: 0,\n      filter: \"all\" //true for done, false for not done, nothing for no filter\n    };\n  }\n\n  componentDidMount() {\n    //on load, get completed count\n    if (this.state.data) {\n      let count = 0;\n      this.state.data.forEach(item => {\n        if (item.done === false) {\n          count += 1;\n        }\n      });\n      this.setState({ completedCount: count });\n    }\n  }\n\n  addItem() {\n    //on click, add item\n    if (this.state.newItem === \"\") {\n      alert(\"Please add a task to do!\");\n      return;\n    }\n    \n    let date = new Date()\n    let dateString = date.getMonth() + \"-\" + date.getDay() + \"-\" + date.getFullYear() +\", \" + date.getHours() + \":\" + date.getMinutes()\n  \n    const item = {\n      content: this.state.newItem,\n      done: false,\n      time: dateString\n    };\n    let copy = [...this.state.data, item];\n\n    this.setState(prevState => {\n      return { completedCount: prevState.completedCount + 1, newItem: \"\" };\n    });\n    this.updateApp(copy);\n  }\n\n  removeItem(index) {\n    //on click remove item\n    let copy = [...this.state.data];\n    copy.splice(index, 1);\n\n    this.setState(prevState => {\n      return { completedCount: prevState.completedCount - 1 }; //adjust task counter\n    });\n    this.updateApp(copy);\n  }\n\n  completeItem(index) {\n    //on click remove item\n    let copy = [...this.state.data];\n    copy[index].done = true;\n\n    this.setState(prevState => {\n      return { completedCount: prevState.completedCount - 1, newItem: \"\" };\n    });\n    this.updateApp(copy);\n  }\n\n  removeComplete() {\n    //remove completed items\n    let copy = [...this.state.data].filter(item => item.done !== true);\n\n    this.updateApp(copy);\n  }\n\n  updateApp(data) {\n    this.setState({ data: data }); //updates state and resets input field\n\n    let newArray = { tasks: data };\n    localStorage.setItem(\"ToDo\", JSON.stringify(newArray));\n  }\n\n  updateInput(key, value) {\n    //for updating state from input\n    this.setState({\n      [key]: value\n    });\n  }\n\n  filterData(filter) { //allowing for filtering items\n    let filterData;\n    switch (filter) {\n      case \"done\":\n        filterData = true;\n        break;\n      case \"notDone\":\n        filterData = false;\n        break;\n      default:\n        filterData = \"all\";\n        break;\n    }\n    this.setState({ filter: filterData });\n  }\n\n  render() {\n    return (\n      <div className=\"app-container\">\n        <div className=\"settings-block\">\n          <CompletedContainer\n            completedCount={this.state.completedCount}\n          ></CompletedContainer>\n          <ToDoSettings\n            clearComplete={this.removeComplete.bind(this)}\n            filterData={this.filterData.bind(this)}\n          ></ToDoSettings>\n          <div\n            className=\"subtext clear-complete teal\"\n            onClick={this.removeComplete.bind(this)}\n          >\n            Clear Completed\n          </div>\n        </div>\n\n        <div className=\"to-do-container\">\n          <ul>\n            {this.state.data.map((item, i) => {\n              //repeating line items with a filter\n\n              if (\n                this.state.filter == \"all\" ||\n                item.done === this.state.filter\n              ) {\n                return (\n                  <ToDoItem\n                    item={item}\n                    removeItem={this.removeItem.bind(this)}\n                    key={i}\n                    index={i}\n                    completeItem={this.completeItem.bind(this)}\n                  ></ToDoItem>\n                );\n              }\n            })}\n            <li className=\"input-section\">\n              <input\n                className=\"input-field box-shadow\"\n                type=\"text\"\n                value={this.state.newItem}\n                placeholder=\"What do you want to do?\"\n                onChange={e => this.updateInput(\"newItem\", e.target.value)}\n              ></input>\n\n              <button\n                className=\"input-button\"\n                onClick={this.addItem.bind(this)}\n              >\n                + Add\n              </button>\n            </li>\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\n\nimport ToDoContainer from \"./components/toDoContainer/index.js\";\n\nlet listArray = { tasks: [] };\n\n//if no local storage, give default\nif (localStorage.getItem(\"ToDo\") != null) {\n  listArray = JSON.parse(localStorage.getItem(\"ToDo\"));\n} else {\n  listArray = {\n    tasks: [\n      {\n        content: \"Welcome to Coolest To Do App!\",\n        done: false\n      },\n      {\n        content: \"Click 'remove' to remove a task!\",\n        done: false\n      },\n      {\n        content: \"You can also add more tasks!\",\n        done: false\n      },\n      {\n        content: \"Completed Tasks can be removed by clicking 'Clear Completed'\",\n        done: true\n      }\n    ]\n  };\n  localStorage.setItem(\"ToDo\", JSON.stringify(listArray));\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div id=\"container\">\n        <h1 id=\"title\">COOLEST TO DO APP</h1>\n        <ToDoContainer data={listArray.tasks}></ToDoContainer>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();\n"],"sourceRoot":""}